//reads each string and parses through each row to get genre
string movieList::parseStringFromCSV(const string &movieString){
	int commaCount = 0;
	bool checkQuotes = false;
	int QuoteCount = 0;
	char curChar;
	string movie = movieString;
	string GenrePrint = "";
	//each string has "movieID,title,genres"
	//the title can contain , as well, and for those, we have to skip
	for (int i =0; i < movie.length()-1; ++i){
		if (movie.at(i) == '"'){
			checkQuotes == true;
			++QuoteCount;
		}
		if (movie.at(i) == ',' && checkQuotes == false && (QuoteCount == 0 || QuoteCount == 2)){
			++commaCount;
		}
		if (commaCount == 2){
			curChar = movie.at(i+1);
			GenrePrint += curChar;
		}
	}
	return GenrePrint;
}



void writeToJson( vector<movie>& m){
    json newdata;
    vector<movie>::iterator i;
    std::ofstream out("newdata.json");
    for( i = list.begin();i < list.end(); i++){
       newdata["title"]=i->getTitle();
       newdata["directedBy"]=i->getDirector();
       newdata["starring"]=i->getCast();
       newdata["avgRating"]=i->getRating();
       newdata["imdbId"]=i->getImdbId();
       newdata["item_id"]=i->getItemId();
       newdata["year"]=i->getYear();
       newdata["genresList"]=i->getGenreList();

       out << setw(4) << newdata << endl;
    }
}
   
   
   
   string movieList::ParseGenra(int item_id){
       string genra;
       ifstream csvFile("data/csvjson.json");
       json moviedataFromcsv = json::parse(csvFile);
       for (int i = 0; i < moviedataFromcsv.size(); i++){
           if (moviedataFromcsv[i]["movieId"]==item_id){
               genra =  moviedataFromcsv[i]["genres"];
               moviedataFromcsv.erase(i);
           }
       }
       return genra;
   }

//parse genre from string and make it to a genrelist within the movie class.
void movie::generateGenreList(){
    
    string delimiter = "|";
    size_t pos = 0;
    string s = genre;
    string item;
    while((pos=s.find(delimiter))!=string::npos){
        item = s.substr(0,pos);
        s.erase(0,pos+delimiter.length());
        genreList.push_back(item);
    }
    genreList.push_back(s);      

}


void movieList::setGenres(){
	fstream f("data/MovieDatabase.json");
    json moviedata = json::parse(f);
   
    std::ofstream out("genres.txt");

    for( int i = 0 ; i < moviedata.size(); i++){
     for(auto x : moviedata[i]["genresList"]){
		out << x << endl;
	 } 
    }

	ifstream in( "genres.txt" );
	ofstream OUT( "uniqueGenres.txt" );
	vector<string> lines, sorted_lines;
	string str, sorted_str;
	size_t pos = 0;

	while( in )
    {
        getline( in, str );
        sorted_str = str;
        sort( sorted_str.begin(), sorted_str.end() );

        if( find_str( sorted_lines, sorted_str ) )
        {
            lines.push_back( str );
            sorted_lines.push_back( sorted_str );
        }
    }

    for( const auto &i : lines )
        OUT << i << std::endl;

	in.close();
	OUT.close();
	
};